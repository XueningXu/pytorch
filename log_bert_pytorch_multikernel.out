/data/users/pianpwk/pytorch/torch/cuda/__init__.py:63: FutureWarning: The pynvml package is deprecated. Please install nvidia-ml-py instead. If you did not install pynvml directly, please report this to the maintainers of the package that installed pynvml for you.
  import pynvml  # type: ignore[import]
loading model: 0it [00:00, ?it/s]loading model: 0it [00:05, ?it/s]
cuda eval  BERT_pytorch                       
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_625", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.011359999887645245, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_625 0.0114 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_629 0.0116 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_624 0.0123 ms 92.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_636 0.0125 ms 90.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_623 0.0127 ms 89.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_628 0.0129 ms 88.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_622 0.0133 ms 85.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_634 0.0135 ms 84.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_631 0.0145 ms 78.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  mm 0.0147 ms 77.5% 
SingleProcess AUTOTUNE benchmarking takes 0.1906 seconds and 0.0004 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_646", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.015039999969303608, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_646 0.0150 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_643 0.0152 ms 99.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  mm 0.0152 ms 98.7% 
  triton_mm_648 0.0156 ms 96.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_645 0.0160 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_651 0.0177 ms 85.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_647 0.0180 ms 83.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_644 0.0181 ms 83.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_650 0.0194 ms 77.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_638 0.0199 ms 75.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1856 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_659", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.022624000906944275, "best_triton_pos": 0}
AUTOTUNE mm(1024x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_659 0.0226 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_662 0.0232 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_665 0.0234 ms 96.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0266 ms 85.0% 
  triton_mm_663 0.0283 ms 80.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_657 0.0295 ms 76.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_666 0.0311 ms 72.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_660 0.0313 ms 72.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_664 0.0314 ms 72.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_661 0.0315 ms 71.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1823 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.05910399928689003, "best_triton_pos": 1, "best_triton_time": 0.06988800317049026, "best_triton_kernel": "triton_mm_680", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(4096x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0591 ms 100.0% 
  triton_mm_680 0.0699 ms 84.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_674 0.0831 ms 71.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_677 0.0849 ms 69.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_681 0.0850 ms 69.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_679 0.0889 ms 66.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_678 0.0890 ms 66.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_675 0.0916 ms 64.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_676 0.0997 ms 59.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_672 0.1067 ms 55.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3323 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.21699200570583344, "best_triton_pos": 1, "best_triton_time": 0.2772800028324127, "best_triton_kernel": "triton_mm_695", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2170 ms 100.0% 
  triton_mm_695 0.2773 ms 78.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_689 0.3412 ms 63.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_696 0.3479 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_694 0.3480 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_690 0.3487 ms 62.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_692 0.3601 ms 60.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_693 0.3668 ms 59.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_691 0.3893 ms 55.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_687 0.4377 ms 49.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5417 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8511999845504761, "best_triton_pos": 1, "best_triton_time": 1.0936959981918335, "best_triton_kernel": "triton_mm_710", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.8512 ms 100.0% 
  triton_mm_710 1.0937 ms 77.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_711 1.3609 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_709 1.3762 ms 61.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_704 1.3789 ms 61.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_705 1.4360 ms 59.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_707 1.4364 ms 59.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_708 1.4383 ms 59.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_706 1.5126 ms 56.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_702 1.8635 ms 45.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6727 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_617", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8", "best_time": 0.01775999926030636, "best_triton_pos": 0}
AUTOTUNE mm(512x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_617 0.0178 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_620 0.0181 ms 97.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_614 0.0183 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_616 0.0193 ms 92.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0195 ms 91.3% 
  triton_mm_613 0.0196 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_619 0.0197 ms 90.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_615 0.0228 ms 77.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_612 0.0233 ms 76.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_611 0.0258 ms 68.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1560 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "mm", "best_time": 0.014944000169634819, "best_triton_pos": 1, "best_triton_time": 0.015135999768972397, "best_triton_kernel": "triton_mm_9729", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2"}
AUTOTUNE mm(4x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0149 ms 100.0% 
  triton_mm_9729 0.0151 ms 98.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9733 0.0198 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9728 0.0240 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9727 0.0254 ms 58.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9732 0.0277 ms 53.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9726 0.0285 ms 52.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9740 0.0292 ms 51.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9738 0.0305 ms 49.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9735 0.0354 ms 42.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2368 seconds and 0.0002 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.020031999796628952, "best_triton_pos": 1, "best_triton_time": 0.02630399912595749, "best_triton_kernel": "triton_mm_9744", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE mm(256x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0200 ms 100.0% 
  triton_mm_9744 0.0263 ms 76.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9743 0.0294 ms 68.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9747 0.0299 ms 67.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_9750 0.0310 ms 64.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9742 0.0342 ms 58.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9752 0.0354 ms 56.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9749 0.0356 ms 56.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9755 0.0402 ms 49.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9751 0.0469 ms 42.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2352 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.031936001032590866, "best_triton_pos": 1, "best_triton_time": 0.03670400008559227, "best_triton_kernel": "triton_mm_9762", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(1024x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0319 ms 100.0% 
  triton_mm_9762 0.0367 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_9765 0.0370 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9767 0.0401 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9764 0.0406 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9770 0.0430 ms 74.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9759 0.0454 ms 70.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9763 0.0514 ms 62.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9766 0.0518 ms 61.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9769 0.0545 ms 58.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2080 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_9778", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.07212799787521362, "best_triton_pos": 0}
AUTOTUNE mm(4096x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  triton_mm_9778 0.0721 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9784 0.0747 ms 96.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9781 0.0780 ms 92.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0808 ms 89.3% 
  triton_mm_9785 0.0952 ms 75.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9780 0.0958 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9779 0.0969 ms 74.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9782 0.0974 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9776 0.1004 ms 71.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9783 0.1020 ms 70.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3231 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.22288000583648682, "best_triton_pos": 1, "best_triton_time": 0.2436159998178482, "best_triton_kernel": "triton_mm_9799", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.2229 ms 100.0% 
  triton_mm_9799 0.2436 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9800 0.2882 ms 77.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9793 0.2900 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9798 0.3120 ms 71.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_9794 0.3446 ms 64.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9796 0.3472 ms 64.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9797 0.3574 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9795 0.3677 ms 60.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9791 0.4211 ms 52.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5355 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8499839901924133, "best_triton_pos": 1, "best_triton_time": 0.9541440010070801, "best_triton_kernel": "triton_mm_9814", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.8500 ms 100.0% 
  triton_mm_9814 0.9541 ms 89.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9815 1.1653 ms 72.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9813 1.2561 ms 67.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_9808 1.2780 ms 66.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9809 1.3670 ms 62.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9810 1.3995 ms 60.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9811 1.4536 ms 58.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9812 1.4596 ms 58.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9806 1.8247 ms 46.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6594 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.022431999444961548, "best_triton_pos": 1, "best_triton_time": 0.03155200183391571, "best_triton_kernel": "triton_mm_9716", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(512x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0224 ms 100.0% 
  triton_mm_9716 0.0316 ms 71.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_9719 0.0324 ms 69.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9713 0.0330 ms 68.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9721 0.0360 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9718 0.0368 ms 61.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9711 0.0397 ms 56.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9724 0.0407 ms 55.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9712 0.0463 ms 48.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9720 0.0487 ms 46.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2025 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_519", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.008576000109314919, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_519 0.0086 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_523 0.0092 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_518 0.0093 ms 92.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_517 0.0096 ms 89.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_522 0.0102 ms 84.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0104 ms 82.7% 
  triton_mm_516 0.0107 ms 80.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_530 0.0107 ms 80.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_528 0.0109 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_525 0.0122 ms 70.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1806 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_534", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8", "best_time": 0.009920000098645687, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_534 0.0099 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  mm 0.0103 ms 96.6% 
  triton_mm_533 0.0108 ms 91.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_537 0.0116 ms 85.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_532 0.0120 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_540 0.0122 ms 81.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_542 0.0130 ms 76.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_539 0.0131 ms 75.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_545 0.0156 ms 63.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_538 0.0157 ms 63.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1722 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.013311999849975109, "best_triton_pos": 1, "best_triton_time": 0.013311999849975109, "best_triton_kernel": "triton_mm_555", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(1024x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0133 ms 100.0% 
  triton_mm_555 0.0133 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_552 0.0138 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_557 0.0140 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_554 0.0141 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_560 0.0162 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_553 0.0166 ms 80.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_556 0.0170 ms 78.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_559 0.0183 ms 72.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_547 0.0202 ms 66.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1434 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_568", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.024064000695943832, "best_triton_pos": 0}
AUTOTUNE mm(4096x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_568 0.0241 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_571 0.0250 ms 96.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_574 0.0250 ms 96.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0269 ms 89.3% 
  triton_mm_572 0.0294 ms 81.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_566 0.0296 ms 81.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_569 0.0310 ms 77.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_575 0.0320 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_573 0.0324 ms 74.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_570 0.0328 ms 73.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1791 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.07049600034952164, "best_triton_pos": 1, "best_triton_time": 0.0769599974155426, "best_triton_kernel": "triton_mm_589", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0705 ms 100.0% 
  triton_mm_589 0.0770 ms 91.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_583 0.0855 ms 82.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_590 0.0891 ms 79.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_586 0.0906 ms 77.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_584 0.0931 ms 75.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_588 0.0951 ms 74.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_587 0.0964 ms 73.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_585 0.1077 ms 65.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_581 0.1090 ms 64.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3344 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.24585600197315216, "best_triton_pos": 1, "best_triton_time": 0.29660800099372864, "best_triton_kernel": "triton_mm_604", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2459 ms 100.0% 
  triton_mm_604 0.2966 ms 82.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_598 0.3354 ms 73.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_605 0.3363 ms 73.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_601 0.3596 ms 68.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_603 0.3741 ms 65.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_599 0.3761 ms 65.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_602 0.3787 ms 64.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_600 0.4251 ms 57.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_596 0.4290 ms 57.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5404 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.010816000401973724, "best_triton_pos": 1, "best_triton_time": 0.011711999773979187, "best_triton_kernel": "triton_mm_506", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(512x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0108 ms 100.0% 
  triton_mm_506 0.0117 ms 92.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_509 0.0125 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_511 0.0131 ms 82.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_508 0.0132 ms 81.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_501 0.0147 ms 73.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_502 0.0152 ms 71.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_503 0.0154 ms 70.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_514 0.0157 ms 68.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_507 0.0158 ms 68.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1402 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "bmm", "best_time": 0.008832000195980072, "best_triton_pos": 1, "best_triton_time": 0.008895999751985073, "best_triton_kernel": "triton_bmm_223", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE bmm(24x256x64, 24x64x256)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  bmm 0.0088 ms 100.0% 
  triton_bmm_223 0.0089 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_224 0.0090 ms 97.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_218 0.0091 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_228 0.0096 ms 92.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_217 0.0097 ms 91.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_229 0.0099 ms 89.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_225 0.0099 ms 89.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_227 0.0100 ms 88.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_226 0.0100 ms 87.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1978 seconds and 0.0003 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 15, "num_triton_choices": 14, "best_kernel": "bmm", "best_time": 0.011264000087976456, "best_triton_pos": 1, "best_triton_time": 0.011807999573647976, "best_triton_kernel": "triton_bmm_419", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE bmm(24x256x256, 24x256x64)
strides: [s22**2, s22, 1], [64*s22, 64, 1]
dtypes: torch.float32, torch.float32
  bmm 0.0113 ms 100.0% 
  triton_bmm_419 0.0118 ms 95.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_418 0.0121 ms 93.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_424 0.0131 ms 86.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_425 0.0134 ms 83.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_426 0.0141 ms 79.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_423 0.0144 ms 78.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_420 0.0148 ms 76.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_427 0.0149 ms 75.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_428 0.0154 ms 73.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1611 seconds and 0.0003 seconds precompiling for 15 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_9826", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006976000033318996, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9826 0.0070 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9819 0.0071 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9825 0.0071 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9818 0.0075 ms 92.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9822 0.0078 ms 89.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_9824 0.0084 ms 82.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9817 0.0094 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_9823 0.0105 ms 66.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0128 ms 54.4% 
  bias_addmm 0.0136 ms 51.4% 
SingleProcess AUTOTUNE benchmarking takes 0.1380 seconds and 0.0003 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_9837", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006943999789655209, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9837 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9830 0.0071 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9836 0.0071 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9829 0.0076 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9833 0.0080 ms 87.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_9835 0.0085 ms 81.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9828 0.0093 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_9834 0.0103 ms 67.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0129 ms 53.8% 
  bias_addmm 0.0138 ms 50.5% 
SingleProcess AUTOTUNE benchmarking takes 0.1096 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_9848", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006976000033318996, "best_triton_pos": 0}
AUTOTUNE addmm(16x2, 16x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9848 0.0070 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9847 0.0071 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9841 0.0071 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9840 0.0080 ms 87.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_9844 0.0082 ms 84.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_9846 0.0090 ms 77.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_9839 0.0100 ms 69.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_9845 0.0112 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0128 ms 54.6% 
  bias_addmm 0.0137 ms 50.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1107 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_9852", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.00723200011998415, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9852 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9858 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_9859 0.0079 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9851 0.0086 ms 84.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9855 0.0091 ms 79.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_9857 0.0097 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_9850 0.0101 ms 71.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9856 0.0120 ms 60.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0128 ms 56.6% 
  bias_addmm 0.0139 ms 52.2% 
SingleProcess AUTOTUNE benchmarking takes 0.1377 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 14, "num_triton_choices": 12, "best_kernel": "triton_mm_9871", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4", "best_time": 0.0072639998979866505, "best_triton_pos": 0}
AUTOTUNE addmm(64x2, 64x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9871 0.0073 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9864 0.0076 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9870 0.0076 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9862 0.0084 ms 86.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9863 0.0086 ms 84.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9867 0.0090 ms 80.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9869 0.0097 ms 74.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9861 0.0103 ms 70.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9868 0.0120 ms 60.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 0.0138 ms 52.5% 
SingleProcess AUTOTUNE benchmarking takes 0.1472 seconds and 0.0001 seconds precompiling for 14 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_9882", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.007519999984651804, "best_triton_pos": 0}
AUTOTUNE addmm(128x2, 128x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9882 0.0075 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9876 0.0076 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9874 0.0086 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9875 0.0086 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9879 0.0090 ms 83.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9887 0.0097 ms 77.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9881 0.0097 ms 77.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9873 0.0105 ms 71.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9886 0.0106 ms 71.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9884 0.0109 ms 68.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1648 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_9898", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.007840000092983246, "best_triton_pos": 0}
AUTOTUNE addmm(256x2, 256x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9898 0.0078 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9892 0.0080 ms 98.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9890 0.0088 ms 88.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9891 0.0088 ms 88.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9895 0.0093 ms 84.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9903 0.0097 ms 80.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9897 0.0100 ms 78.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_9889 0.0109 ms 71.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9902 0.0110 ms 71.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9900 0.0112 ms 70.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1531 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_9915", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8", "best_time": 0.09123200178146362, "best_triton_pos": 0}
AUTOTUNE addmm(512x20005, 512x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9915 0.0912 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9914 0.0939 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9912 0.0941 ms 96.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9911 0.0949 ms 96.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9918 0.1052 ms 86.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9917 0.1075 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9909 0.1131 ms 80.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9913 0.1146 ms 79.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9910 0.1160 ms 78.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_9916 0.1464 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.4211 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_9920", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2", "best_time": 0.04323200136423111, "best_triton_pos": 0}
AUTOTUNE addmm(4x20005, 4x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9920 0.0432 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_9923 0.0435 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9926 0.0436 ms 99.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9930 0.0442 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9922 0.0444 ms 97.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_9927 0.0447 ms 96.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9921 0.0450 ms 96.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_9931 0.0452 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9934 0.0455 ms 95.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_9932 0.0456 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2476 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_9945", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.061184000223875046, "best_triton_pos": 0}
AUTOTUNE addmm(256x20005, 256x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9945 0.0612 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9942 0.0621 ms 98.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9946 0.0640 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9943 0.0668 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9940 0.0710 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9948 0.0722 ms 84.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9941 0.0723 ms 84.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_9949 0.0734 ms 83.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9944 0.0744 ms 82.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9947 0.0981 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2791 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_9960", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.16307200491428375, "best_triton_pos": 0}
AUTOTUNE addmm(1024x20005, 1024x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9960 0.1631 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9961 0.1646 ms 99.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9957 0.1719 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9963 0.1748 ms 93.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9958 0.1790 ms 91.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9964 0.1888 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9955 0.2023 ms 80.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9959 0.2137 ms 76.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9956 0.2160 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 0.2627 ms 62.1% 
SingleProcess AUTOTUNE benchmarking takes 0.5060 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_9975", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.6185920238494873, "best_triton_pos": 0}
AUTOTUNE addmm(4096x20005, 4096x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9975 0.6186 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9976 0.6469 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9972 0.6536 ms 94.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9978 0.6736 ms 91.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9973 0.7017 ms 88.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9979 0.7157 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9970 0.7540 ms 82.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9974 0.8469 ms 73.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9971 0.8644 ms 71.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 1.0507 ms 58.9% 
SingleProcess AUTOTUNE benchmarking takes 0.6152 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_9990", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 2.464128017425537, "best_triton_pos": 0}
AUTOTUNE addmm(16384x20005, 16384x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_9990 2.4641 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9987 2.5834 ms 95.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9993 2.6476 ms 93.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9991 2.7362 ms 90.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9988 2.7386 ms 90.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_9994 2.9386 ms 83.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9985 2.9850 ms 82.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_9989 3.2868 ms 75.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_9986 3.6637 ms 67.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 4.0918 ms 60.2% 
SingleProcess AUTOTUNE benchmarking takes 0.9336 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_10005", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 10.08028793334961, "best_triton_pos": 0}
AUTOTUNE addmm(65536x20005, 65536x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_10005 10.0803 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10002 10.0812 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10008 10.3951 ms 97.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10003 11.5565 ms 87.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10009 11.5928 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10006 11.6735 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10000 12.4792 ms 80.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_10004 13.5450 ms 74.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10001 14.3589 ms 70.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 15.8348 ms 63.7% 
SingleProcess AUTOTUNE benchmarking takes 2.3523 seconds and 0.0001 seconds precompiling for 17 choices
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
0 16.584962500721154 ((2, 2, 768), (3072, 768), (4, 3072))
1 10.584962500721156 ((16, 16, 768), (3072, 768), (256, 3072))
2 8.584962500721156 ((32, 32, 768), (3072, 768), (1024, 3072))
3 7.415037499278844 ((64, 64, 768), (3072, 768), (4096, 3072))
4 9.415037499278844 ((128, 128, 768), (3072, 768), (16384, 3072))
5 11.415037499278844 ((256, 256, 768), (3072, 768), (65536, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
0 7.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 10.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 11.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 12.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 13.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 14.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
0 14.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 8.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 8.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 12.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 14.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
running speedup_experiment with sizes: [torch.Size([2, 256]), torch.Size([2, 256])]
running benchmark:   0%|          | 0/30 [00:00<?, ?it/s]runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  33%|███▎      | 10/30 [00:00<00:00, 90.60it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  67%|██████▋   | 20/30 [00:00<00:00, 91.80it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark: 100%|██████████| 30/30 [00:00<00:00, 92.92it/s]running benchmark: 100%|██████████| 30/30 [00:00<00:00, 92.45it/s]
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_10635", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.011296000331640244, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10635 0.0113 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_10639 0.0116 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_10634 0.0119 ms 94.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_10633 0.0124 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_10646 0.0127 ms 89.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_10638 0.0128 ms 88.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10632 0.0132 ms 85.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_10644 0.0134 ms 84.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_10641 0.0147 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  mm 0.0149 ms 75.6% 
SingleProcess AUTOTUNE benchmarking takes 0.1869 seconds and 0.0004 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_10656", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.015039999969303608, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10656 0.0150 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10653 0.0151 ms 99.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  mm 0.0154 ms 97.9% 
  triton_mm_10658 0.0155 ms 96.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10655 0.0158 ms 95.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10661 0.0177 ms 85.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10657 0.0180 ms 83.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10654 0.0180 ms 83.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10660 0.0198 ms 76.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10648 0.0204 ms 73.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1808 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_10669", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.022655999287962914, "best_triton_pos": 0}
AUTOTUNE mm(1024x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10669 0.0227 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10672 0.0234 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10675 0.0238 ms 95.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0263 ms 86.2% 
  triton_mm_10673 0.0286 ms 79.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10667 0.0297 ms 76.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_10670 0.0300 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10676 0.0309 ms 73.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10674 0.0314 ms 72.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10671 0.0315 ms 71.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1807 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.05929600074887276, "best_triton_pos": 1, "best_triton_time": 0.06998399645090103, "best_triton_kernel": "triton_mm_10690", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(4096x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0593 ms 100.0% 
  triton_mm_10690 0.0700 ms 84.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10684 0.0834 ms 71.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10691 0.0850 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10687 0.0866 ms 68.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10688 0.0893 ms 66.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10689 0.0895 ms 66.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10685 0.0915 ms 64.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10686 0.0989 ms 59.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10682 0.1070 ms 55.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3295 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.21782399713993073, "best_triton_pos": 1, "best_triton_time": 0.27555200457572937, "best_triton_kernel": "triton_mm_10705", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2178 ms 100.0% 
  triton_mm_10705 0.2756 ms 79.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10706 0.3383 ms 64.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10699 0.3432 ms 63.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10704 0.3486 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10700 0.3516 ms 62.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10702 0.3634 ms 59.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10703 0.3678 ms 59.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10701 0.3816 ms 57.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10697 0.4339 ms 50.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5394 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8576319813728333, "best_triton_pos": 1, "best_triton_time": 1.0676159858703613, "best_triton_kernel": "triton_mm_10720", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.8576 ms 100.0% 
  triton_mm_10720 1.0676 ms 80.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10719 1.3664 ms 62.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10714 1.3746 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10715 1.3901 ms 61.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10721 1.3988 ms 61.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10718 1.4520 ms 59.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10717 1.4528 ms 59.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10716 1.5404 ms 55.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10712 1.7970 ms 47.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6732 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.058848001062870026, "best_triton_pos": 1, "best_triton_time": 0.07014399766921997, "best_triton_kernel": "triton_mm_10629", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(4096x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0588 ms 100.0% 
  triton_mm_10629 0.0701 ms 83.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10623 0.0844 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10630 0.0852 ms 69.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10626 0.0865 ms 68.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10628 0.0892 ms 65.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10627 0.0898 ms 65.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10624 0.0911 ms 64.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10625 0.0997 ms 59.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10621 0.1074 ms 54.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3301 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "mm", "best_time": 0.015039999969303608, "best_triton_pos": 1, "best_triton_time": 0.015135999768972397, "best_triton_kernel": "triton_mm_19739", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2"}
AUTOTUNE mm(4x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0150 ms 100.0% 
  triton_mm_19739 0.0151 ms 99.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19743 0.0198 ms 76.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19738 0.0240 ms 62.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19737 0.0259 ms 58.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19742 0.0278 ms 54.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19736 0.0286 ms 52.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19750 0.0294 ms 51.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19748 0.0310 ms 48.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19745 0.0353 ms 42.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2379 seconds and 0.0002 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.019872000440955162, "best_triton_pos": 1, "best_triton_time": 0.0261439997702837, "best_triton_kernel": "triton_mm_19754", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE mm(256x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0199 ms 100.0% 
  triton_mm_19754 0.0261 ms 76.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19753 0.0293 ms 67.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19757 0.0304 ms 65.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_19760 0.0318 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19752 0.0343 ms 57.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19762 0.0353 ms 56.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19759 0.0356 ms 55.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19765 0.0407 ms 48.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19761 0.0478 ms 41.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2340 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.0318400003015995, "best_triton_pos": 1, "best_triton_time": 0.03654399886727333, "best_triton_kernel": "triton_mm_19772", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(1024x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0318 ms 100.0% 
  triton_mm_19772 0.0365 ms 87.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_19775 0.0376 ms 84.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19777 0.0404 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19774 0.0415 ms 76.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19780 0.0438 ms 72.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19769 0.0463 ms 68.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19776 0.0518 ms 61.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19773 0.0524 ms 60.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19779 0.0553 ms 57.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2090 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_19788", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.07145600020885468, "best_triton_pos": 0}
AUTOTUNE mm(4096x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  triton_mm_19788 0.0715 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19794 0.0747 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19791 0.0769 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0815 ms 87.6% 
  triton_mm_19789 0.0911 ms 78.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19795 0.0950 ms 75.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19792 0.0970 ms 73.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19790 0.0978 ms 73.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19786 0.1004 ms 71.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19793 0.1026 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3227 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.22592000663280487, "best_triton_pos": 1, "best_triton_time": 0.24185599386692047, "best_triton_kernel": "triton_mm_19809", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.2259 ms 100.0% 
  triton_mm_19809 0.2419 ms 93.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19803 0.2737 ms 82.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19810 0.2980 ms 75.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19808 0.3143 ms 71.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_19804 0.3242 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19806 0.3457 ms 65.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19807 0.3545 ms 63.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19805 0.3644 ms 62.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19801 0.4124 ms 54.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5365 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8499839901924133, "best_triton_pos": 1, "best_triton_time": 0.9579520225524902, "best_triton_kernel": "triton_mm_19824", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.8500 ms 100.0% 
  triton_mm_19824 0.9580 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19825 1.1927 ms 71.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19818 1.2205 ms 69.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19823 1.2596 ms 67.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_19819 1.3557 ms 62.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19820 1.4294 ms 59.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19822 1.4426 ms 58.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19821 1.4777 ms 57.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19816 1.7857 ms 47.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6571 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_19727", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.07289600372314453, "best_triton_pos": 0}
AUTOTUNE mm(4096x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  triton_mm_19727 0.0729 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19733 0.0746 ms 97.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19730 0.0791 ms 92.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0825 ms 88.4% 
  triton_mm_19734 0.0952 ms 76.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19729 0.0963 ms 75.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19728 0.0983 ms 74.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19731 0.0985 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19725 0.1006 ms 72.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19732 0.1028 ms 70.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3231 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_10529", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.008704000152647495, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10529 0.0087 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_10533 0.0092 ms 94.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_10528 0.0094 ms 92.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_10527 0.0096 ms 90.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  mm 0.0104 ms 83.7% 
  triton_mm_10532 0.0104 ms 83.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10538 0.0108 ms 80.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_10526 0.0109 ms 80.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_10540 0.0111 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_10535 0.0123 ms 70.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1929 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_10544", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8", "best_time": 0.010015999898314476, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10544 0.0100 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  mm 0.0104 ms 96.3% 
  triton_mm_10543 0.0108 ms 93.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_10547 0.0116 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_10542 0.0121 ms 82.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_10550 0.0123 ms 81.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10552 0.0128 ms 78.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10549 0.0128 ms 78.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10555 0.0156 ms 64.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10551 0.0157 ms 63.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1741 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.013055999763309956, "best_triton_pos": 1, "best_triton_time": 0.013183999806642532, "best_triton_kernel": "triton_mm_10565", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(1024x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0131 ms 100.0% 
  triton_mm_10565 0.0132 ms 99.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10562 0.0137 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_10567 0.0137 ms 95.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10564 0.0139 ms 93.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10570 0.0161 ms 81.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10563 0.0164 ms 79.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10566 0.0168 ms 77.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10569 0.0181 ms 72.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10557 0.0199 ms 65.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1432 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_10578", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.024224000051617622, "best_triton_pos": 0}
AUTOTUNE mm(4096x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10578 0.0242 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10581 0.0244 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10584 0.0245 ms 98.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0271 ms 89.3% 
  triton_mm_10576 0.0296 ms 81.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_10582 0.0302 ms 80.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10579 0.0309 ms 78.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10585 0.0318 ms 76.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10583 0.0320 ms 75.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10580 0.0324 ms 74.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1786 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.07142399996519089, "best_triton_pos": 1, "best_triton_time": 0.07705599814653397, "best_triton_kernel": "triton_mm_10599", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0714 ms 100.0% 
  triton_mm_10599 0.0771 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10593 0.0859 ms 83.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10600 0.0895 ms 79.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10596 0.0907 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10594 0.0925 ms 77.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10598 0.0948 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10597 0.0967 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10595 0.1067 ms 66.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10591 0.1095 ms 65.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3348 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.24566400051116943, "best_triton_pos": 1, "best_triton_time": 0.2954559922218323, "best_triton_kernel": "triton_mm_10614", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2457 ms 100.0% 
  triton_mm_10614 0.2955 ms 83.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10615 0.3382 ms 72.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10608 0.3396 ms 72.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10611 0.3617 ms 67.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10609 0.3709 ms 66.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10613 0.3740 ms 65.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10612 0.3761 ms 65.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10610 0.4174 ms 58.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10606 0.4293 ms 57.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5422 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_10517", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.02364799939095974, "best_triton_pos": 0}
AUTOTUNE mm(4096x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_10517 0.0236 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10520 0.0244 ms 97.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10523 0.0246 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0271 ms 87.2% 
  triton_mm_10521 0.0293 ms 80.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10515 0.0295 ms 80.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_10518 0.0298 ms 79.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_10524 0.0308 ms 76.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_10522 0.0320 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_10519 0.0322 ms 73.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1811 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_10233", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.20022399723529816, "best_triton_pos": 0}
AUTOTUNE bmm(24x2048x64, 24x64x2048)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10233 0.2002 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10234 0.2009 ms 99.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  bmm 0.2128 ms 94.1% 
  triton_bmm_10235 0.2330 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10239 0.2404 ms 83.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10228 0.2405 ms 83.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10237 0.2406 ms 83.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_10238 0.2518 ms 79.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10227 0.2593 ms 77.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10236 0.2604 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.6788 seconds and 0.0003 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_10242", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.004832000005990267, "best_triton_pos": 0}
AUTOTUNE bmm(24x2x64, 24x64x2)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10242 0.0048 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_10248 0.0048 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_10247 0.0049 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_10249 0.0050 ms 96.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_10246 0.0051 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_10241 0.0052 ms 93.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_10243 0.0052 ms 93.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_10245 0.0055 ms 87.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_10240 0.0058 ms 83.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  triton_bmm_10244 0.0063 ms 77.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
SingleProcess AUTOTUNE benchmarking takes 0.1104 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_10257", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1", "best_time": 0.005791999865323305, "best_triton_pos": 0}
AUTOTUNE bmm(192x16x64, 192x64x16)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10257 0.0058 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_10252 0.0059 ms 98.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_10258 0.0059 ms 98.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_10253 0.0060 ms 96.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_10251 0.0060 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_10259 0.0060 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_10256 0.0062 ms 92.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_10255 0.0064 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_10250 0.0067 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  triton_bmm_10254 0.0071 ms 81.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
SingleProcess AUTOTUNE benchmarking takes 0.0897 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_10261", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4", "best_time": 0.00902399979531765, "best_triton_pos": 0}
AUTOTUNE bmm(384x32x64, 384x64x32)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10261 0.0090 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10263 0.0092 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_10269 0.0092 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_10265 0.0092 ms 97.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10266 0.0092 ms 97.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10267 0.0092 ms 97.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10262 0.0092 ms 97.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_10268 0.0093 ms 96.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_10264 0.0098 ms 91.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10260 0.0101 ms 89.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=2
SingleProcess AUTOTUNE benchmarking takes 0.1155 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_bmm_10275", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4", "best_time": 0.02300800010561943, "best_triton_pos": 0}
AUTOTUNE bmm(768x64x64, 768x64x64)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10275 0.0230 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10277 0.0243 ms 94.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bmm 0.0243 ms 94.6% 
  triton_bmm_10284 0.0244 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_10281 0.0253 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10280 0.0254 ms 90.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_10274 0.0255 ms 90.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_10282 0.0255 ms 90.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_10283 0.0255 ms 90.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_10278 0.0256 ms 90.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1748 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_10302", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.09465599805116653, "best_triton_pos": 0}
AUTOTUNE bmm(1536x128x64, 1536x64x128)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10302 0.0947 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10297 0.0952 ms 99.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_10296 0.0960 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10300 0.0986 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_10292 0.1008 ms 93.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_10290 0.1008 ms 93.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  bmm 0.1027 ms 92.2% 
  triton_bmm_10301 0.1030 ms 91.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10298 0.1036 ms 91.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10299 0.1040 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3719 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_10314", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.5753920078277588, "best_triton_pos": 0}
AUTOTUNE bmm(3072x256x64, 3072x64x256)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_10314 0.5754 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10315 0.5756 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  bmm 0.5868 ms 98.0% 
  triton_bmm_10320 0.6062 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10318 0.6067 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_10308 0.6489 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10311 0.6492 ms 88.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_10309 0.6590 ms 87.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10310 0.6615 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_10317 0.6775 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 1.5954 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 15, "num_triton_choices": 14, "best_kernel": "bmm", "best_time": 0.22860799729824066, "best_triton_pos": 1, "best_triton_time": 0.24937599897384644, "best_triton_kernel": "triton_bmm_10429", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE bmm(24x2048x2048, 24x2048x64)
strides: [s22**2, s22, 1], [64*s22, 64, 1]
dtypes: torch.float32, torch.float32
  bmm 0.2286 ms 100.0% 
  triton_bmm_10429 0.2494 ms 91.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_10437 0.2534 ms 90.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10438 0.2556 ms 89.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_10440 0.2663 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10428 0.2765 ms 82.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10439 0.2872 ms 79.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_10434 0.3150 ms 72.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_10432 0.3175 ms 72.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_10436 0.3183 ms 71.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5289 seconds and 0.0003 seconds precompiling for 15 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_19836", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006816000211983919, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19836 0.0068 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19829 0.0069 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19835 0.0069 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19828 0.0076 ms 89.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19832 0.0080 ms 85.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_19834 0.0085 ms 80.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19827 0.0095 ms 71.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_19833 0.0106 ms 64.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0128 ms 53.4% 
  bias_addmm 0.0137 ms 49.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1370 seconds and 0.0005 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_19846", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1", "best_time": 0.00687999976798892, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19846 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19840 0.0069 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19847 0.0070 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19839 0.0076 ms 90.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19843 0.0078 ms 88.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_19845 0.0084 ms 82.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19838 0.0095 ms 72.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_19844 0.0106 ms 65.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0127 ms 54.2% 
  bias_addmm 0.0135 ms 50.9% 
SingleProcess AUTOTUNE benchmarking takes 0.1104 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_19858", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006943999789655209, "best_triton_pos": 0}
AUTOTUNE addmm(16x2, 16x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19858 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19851 0.0071 ms 97.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19857 0.0071 ms 97.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19850 0.0078 ms 88.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_19854 0.0083 ms 83.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_19856 0.0089 ms 78.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_19849 0.0100 ms 69.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_19855 0.0111 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0129 ms 54.0% 
  bias_addmm 0.0137 ms 50.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1108 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_19862", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.007199999876320362, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19862 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19868 0.0073 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_19869 0.0078 ms 92.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19861 0.0085 ms 84.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19865 0.0090 ms 80.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_19867 0.0093 ms 77.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_19860 0.0105 ms 68.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19866 0.0120 ms 59.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0136 ms 52.8% 
  bias_addmm 0.0137 ms 52.7% 
SingleProcess AUTOTUNE benchmarking takes 0.1389 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 14, "num_triton_choices": 12, "best_kernel": "triton_mm_19881", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4", "best_time": 0.007199999876320362, "best_triton_pos": 0}
AUTOTUNE addmm(64x2, 64x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19881 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19874 0.0075 ms 96.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19880 0.0075 ms 96.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19873 0.0084 ms 85.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19872 0.0085 ms 84.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19877 0.0089 ms 81.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19879 0.0097 ms 74.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19871 0.0104 ms 69.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19878 0.0121 ms 59.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 0.0137 ms 52.6% 
SingleProcess AUTOTUNE benchmarking takes 0.1422 seconds and 0.0001 seconds precompiling for 14 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_19892", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.007552000228315592, "best_triton_pos": 0}
AUTOTUNE addmm(128x2, 128x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19892 0.0076 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19886 0.0077 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19884 0.0088 ms 85.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19885 0.0088 ms 85.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19889 0.0092 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19897 0.0097 ms 77.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19891 0.0099 ms 76.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19883 0.0108 ms 70.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19896 0.0108 ms 69.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19894 0.0110 ms 68.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1663 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_19908", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.007840000092983246, "best_triton_pos": 0}
AUTOTUNE addmm(256x2, 256x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19908 0.0078 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19902 0.0079 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19900 0.0089 ms 88.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19901 0.0089 ms 88.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19905 0.0094 ms 83.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19913 0.0095 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_19907 0.0101 ms 77.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19899 0.0109 ms 71.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19912 0.0110 ms 71.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19910 0.0112 ms 70.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1539 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_19924", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.6153600215911865, "best_triton_pos": 0}
AUTOTUNE addmm(4096x20005, 4096x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19924 0.6154 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19921 0.6387 ms 96.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19925 0.6415 ms 95.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19927 0.6744 ms 91.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19922 0.6796 ms 90.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19928 0.7088 ms 86.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19919 0.7531 ms 81.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19920 0.8177 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_19923 0.8334 ms 73.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 1.0269 ms 59.9% 
SingleProcess AUTOTUNE benchmarking takes 0.6575 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_19933", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.0432640016078949, "best_triton_pos": 0}
AUTOTUNE addmm(4x20005, 4x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19933 0.0433 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19930 0.0436 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_19936 0.0439 ms 98.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19932 0.0444 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_19937 0.0444 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19940 0.0444 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19941 0.0450 ms 96.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19931 0.0456 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_19942 0.0458 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_19944 0.0458 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2496 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_19955", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.06108799949288368, "best_triton_pos": 0}
AUTOTUNE addmm(256x20005, 256x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19955 0.0611 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19952 0.0628 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19956 0.0648 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19953 0.0671 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19950 0.0713 ms 85.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19958 0.0722 ms 84.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19951 0.0725 ms 84.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_19959 0.0735 ms 83.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19954 0.0744 ms 82.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19957 0.0986 ms 62.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2813 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_19970", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.1632000058889389, "best_triton_pos": 0}
AUTOTUNE addmm(1024x20005, 1024x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19970 0.1632 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19971 0.1668 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19967 0.1723 ms 94.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19973 0.1733 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19968 0.1796 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19974 0.1896 ms 86.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19965 0.2037 ms 80.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19969 0.2150 ms 75.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19966 0.2197 ms 74.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 0.2628 ms 62.1% 
SingleProcess AUTOTUNE benchmarking takes 0.5086 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_19985", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.6179839968681335, "best_triton_pos": 0}
AUTOTUNE addmm(4096x20005, 4096x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_19985 0.6180 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19986 0.6448 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19982 0.6554 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19988 0.6764 ms 91.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19983 0.6984 ms 88.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19989 0.7146 ms 86.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19980 0.7553 ms 81.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19981 0.8646 ms 71.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_19984 0.8734 ms 70.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 1.0531 ms 58.7% 
SingleProcess AUTOTUNE benchmarking takes 0.6127 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_20000", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 2.4688639640808105, "best_triton_pos": 0}
AUTOTUNE addmm(16384x20005, 16384x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_20000 2.4689 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20003 2.6219 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19997 2.6504 ms 93.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20001 2.7827 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20004 2.8942 ms 85.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19998 2.9092 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_19995 2.9869 ms 82.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_19999 3.2693 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_19996 3.5413 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 4.1122 ms 60.0% 
SingleProcess AUTOTUNE benchmarking takes 0.9279 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_20015", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 10.012224197387695, "best_triton_pos": 0}
AUTOTUNE addmm(65536x20005, 65536x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_20015 10.0122 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20012 10.1951 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20018 10.3991 ms 96.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20019 11.0265 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20016 11.5244 ms 86.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20013 11.6282 ms 86.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20010 12.2599 ms 81.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_20014 13.3010 ms 75.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20011 13.9087 ms 72.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_20017 16.0820 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 2.3586 seconds and 0.0001 seconds precompiling for 17 choices
['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
picked kernel 3  :  ((64, 64, 768), (3072, 768), (4096, 3072)) for shape ((2, 256, 768), (3072, 768), (3072,), (2, 256, 3072))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
eager: 0.0071s, compiled: 0.0032s
HINT_SIZE (2, 256) RUNTIME_SIZE (2, 256) 2.199x
model run with shapes ['', '', torch.Size([2, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
0 20.0 ((2, 2, 768), (768, 768), (4, 768))
1 14.0 ((16, 16, 768), (768, 768), (256, 768))
2 12.0 ((32, 32, 768), (768, 768), (1024, 768))
3 10.0 ((64, 64, 768), (768, 768), (4096, 768))
4 12.0 ((128, 128, 768), (768, 768), (16384, 768))
5 14.0 ((256, 256, 768), (768, 768), (65536, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
0 40.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 37.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 36.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 35.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 34.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 33.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
0 20.0 ((2, 2, 12, 64), (768, 768), (4, 768))
1 14.0 ((16, 16, 12, 64), (768, 768), (256, 768))
2 12.0 ((32, 32, 12, 64), (768, 768), (1024, 768))
3 10.0 ((64, 64, 12, 64), (768, 768), (4096, 768))
4 12.0 ((128, 128, 12, 64), (768, 768), (16384, 768))
5 14.0 ((256, 256, 12, 64), (768, 768), (65536, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
0 20.0 ((2, 2, 3072), (768, 3072), (4, 768))
1 14.0 ((16, 16, 3072), (768, 3072), (256, 768))
2 12.0 ((32, 32, 3072), (768, 3072), (1024, 768))
3 10.0 ((64, 64, 3072), (768, 3072), (4096, 768))
4 12.0 ((128, 128, 3072), (768, 3072), (16384, 768))
5 14.0 ((256, 256, 3072), (768, 3072), (65536, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
0 10.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 13.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 14.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 15.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 16.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 17.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
0 20.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 14.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 12.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 12.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 14.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
model run with shapes ['', '', torch.Size([2, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
model run with shapes ['', '', torch.Size([2, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
model run with shapes ['', '', torch.Size([2, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
model run with shapes ['', '', torch.Size([2, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 2048, 64), (2, 12, 64, 2048), (24, 2048, 2048))
runtime shape key ((2, 2048, 768), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 768), (768, 768), (4096, 768)) for shape ((2, 2048, 768), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 12, 64), (768, 768), (4096, 768))
picked kernel 3  :  ((64, 64, 12, 64), (768, 768), (4096, 768)) for shape ((2, 2048, 12, 64), (768, 768), (4096, 768))
runtime shape key ((2, 2048, 3072), (768, 3072), (4096, 768))
picked kernel 3  :  ((64, 64, 3072), (768, 3072), (4096, 768)) for shape ((2, 2048, 3072), (768, 3072), (4096, 768))
runtime shape key ((2,), (2, 2048, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 2048, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (2, 2048, 768), (20005, 768), (4096, 20005))
running speedup_experiment with sizes: [torch.Size([2, 256]), torch.Size([2, 256])]
running benchmark:   0%|          | 0/30 [00:00<?, ?it/s]runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
0 14.0 ((2, 2, 768), (768, 768), (4, 768))
1 8.0 ((16, 16, 768), (768, 768), (256, 768))
2 8.0 ((32, 32, 768), (768, 768), (1024, 768))
3 10.0 ((64, 64, 768), (768, 768), (4096, 768))
4 12.0 ((128, 128, 768), (768, 768), (16384, 768))
5 14.0 ((256, 256, 768), (768, 768), (65536, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
0 28.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 25.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 24.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 23.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 22.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 21.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
0 14.0 ((2, 2, 12, 64), (768, 768), (4, 768))
1 8.0 ((16, 16, 12, 64), (768, 768), (256, 768))
2 8.0 ((32, 32, 12, 64), (768, 768), (1024, 768))
3 10.0 ((64, 64, 12, 64), (768, 768), (4096, 768))
4 12.0 ((128, 128, 12, 64), (768, 768), (16384, 768))
5 14.0 ((256, 256, 12, 64), (768, 768), (65536, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
0 14.0 ((2, 2, 3072), (768, 3072), (4, 768))
1 8.0 ((16, 16, 3072), (768, 3072), (256, 768))
2 8.0 ((32, 32, 3072), (768, 3072), (1024, 768))
3 10.0 ((64, 64, 3072), (768, 3072), (4096, 768))
4 12.0 ((128, 128, 3072), (768, 3072), (16384, 768))
5 14.0 ((256, 256, 3072), (768, 3072), (65536, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
0 7.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 10.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 11.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 12.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 13.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 14.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
0 14.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 8.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 8.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 12.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 14.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape running benchmark:  17%|█▋        | 5/30 [00:00<00:00, 47.27it/s]((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
running benchmark:  47%|████▋     | 14/30 [00:00<00:00, 70.54it/s]runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
running benchmark:  73%|███████▎  | 22/30 [00:00<00:00, 48.97it/s]runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  running benchmark:  93%|█████████▎| 28/30 [00:00<00:00, 49.09it/s]((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
running benchmark: 100%|██████████| 30/30 [00:00<00:00, 52.44it/s]
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_20645", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.011487999930977821, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20645 0.0115 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_20649 0.0116 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_20644 0.0124 ms 92.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_20643 0.0126 ms 90.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_20656 0.0128 ms 89.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_20648 0.0131 ms 88.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20642 0.0135 ms 85.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_20654 0.0136 ms 84.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_20651 0.0146 ms 78.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  mm 0.0149 ms 76.9% 
SingleProcess AUTOTUNE benchmarking takes 0.2023 seconds and 0.0004 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_20666", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.01484800036996603, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20666 0.0148 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0150 ms 99.1% 
  triton_mm_20663 0.0151 ms 98.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_20668 0.0153 ms 96.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20665 0.0154 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20671 0.0175 ms 85.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20667 0.0178 ms 83.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20664 0.0182 ms 81.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20670 0.0197 ms 75.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20658 0.0201 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1819 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_20679", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.022752000018954277, "best_triton_pos": 0}
AUTOTUNE mm(1024x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20679 0.0228 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20682 0.0233 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20685 0.0238 ms 95.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0263 ms 86.5% 
  triton_mm_20683 0.0283 ms 80.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20677 0.0298 ms 76.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_20680 0.0311 ms 73.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20686 0.0311 ms 73.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20684 0.0315 ms 72.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20681 0.0316 ms 72.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1836 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.059039998799562454, "best_triton_pos": 1, "best_triton_time": 0.07017599791288376, "best_triton_kernel": "triton_mm_20700", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(4096x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0590 ms 100.0% 
  triton_mm_20700 0.0702 ms 84.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20694 0.0827 ms 71.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20701 0.0855 ms 69.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20697 0.0864 ms 68.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20699 0.0892 ms 66.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20698 0.0899 ms 65.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20695 0.0916 ms 64.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20696 0.1004 ms 58.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20692 0.1076 ms 54.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3305 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.21833600103855133, "best_triton_pos": 1, "best_triton_time": 0.2782079875469208, "best_triton_kernel": "triton_mm_20715", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2183 ms 100.0% 
  triton_mm_20715 0.2782 ms 78.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20709 0.3410 ms 64.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20716 0.3449 ms 63.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20714 0.3491 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20710 0.3580 ms 61.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20712 0.3582 ms 60.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20713 0.3633 ms 60.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20711 0.3839 ms 56.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20707 0.4391 ms 49.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5354 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8592320084571838, "best_triton_pos": 1, "best_triton_time": 1.1436799764633179, "best_triton_kernel": "triton_mm_20730", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.8592 ms 100.0% 
  triton_mm_20730 1.1437 ms 75.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20724 1.3716 ms 62.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20729 1.3957 ms 61.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20731 1.4187 ms 60.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20727 1.4260 ms 60.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20725 1.4527 ms 59.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20728 1.5370 ms 55.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20726 1.5379 ms 55.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20722 1.7951 ms 47.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6737 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.11046399921178818, "best_triton_pos": 1, "best_triton_time": 0.13865600526332855, "best_triton_kernel": "triton_mm_20639", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(8192x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.1105 ms 100.0% 
  triton_mm_20639 0.1387 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20640 0.1657 ms 66.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20633 0.1718 ms 64.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20638 0.1768 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20636 0.1772 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20634 0.1816 ms 60.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20637 0.1833 ms 60.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20635 0.1922 ms 57.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20631 0.2182 ms 50.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.4534 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "mm", "best_time": 0.01500799972563982, "best_triton_pos": 1, "best_triton_time": 0.015263999812304974, "best_triton_kernel": "triton_mm_29749", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2"}
AUTOTUNE mm(4x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0150 ms 100.0% 
  triton_mm_29749 0.0153 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29753 0.0200 ms 74.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29748 0.0238 ms 63.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29747 0.0256 ms 58.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29752 0.0277 ms 54.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29746 0.0287 ms 52.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29760 0.0294 ms 51.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29758 0.0309 ms 48.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29755 0.0353 ms 42.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2377 seconds and 0.0002 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.020160000771284103, "best_triton_pos": 1, "best_triton_time": 0.02611199952661991, "best_triton_kernel": "triton_mm_29764", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE mm(256x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0202 ms 100.0% 
  triton_mm_29764 0.0261 ms 77.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29763 0.0295 ms 68.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29767 0.0301 ms 67.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_29770 0.0313 ms 64.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29762 0.0344 ms 58.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29772 0.0354 ms 57.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29769 0.0355 ms 56.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29775 0.0401 ms 50.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29771 0.0478 ms 42.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2365 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.03235200047492981, "best_triton_pos": 1, "best_triton_time": 0.036928001791238785, "best_triton_kernel": "triton_mm_29782", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(1024x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0324 ms 100.0% 
  triton_mm_29782 0.0369 ms 87.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_29785 0.0380 ms 85.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29787 0.0407 ms 79.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29784 0.0416 ms 77.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29790 0.0437 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29779 0.0463 ms 69.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29786 0.0523 ms 61.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29783 0.0527 ms 61.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29789 0.0555 ms 58.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2092 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_29798", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.07215999811887741, "best_triton_pos": 0}
AUTOTUNE mm(4096x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  triton_mm_29798 0.0722 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29804 0.0751 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29801 0.0776 ms 93.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0816 ms 88.4% 
  triton_mm_29799 0.0905 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29802 0.0935 ms 77.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29805 0.0955 ms 75.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29800 0.0980 ms 73.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29796 0.0998 ms 72.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29803 0.1029 ms 70.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3234 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.22291199862957, "best_triton_pos": 1, "best_triton_time": 0.24115200340747833, "best_triton_kernel": "triton_mm_29819", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.2229 ms 100.0% 
  triton_mm_29819 0.2412 ms 92.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29813 0.2780 ms 80.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29820 0.2930 ms 76.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29818 0.3148 ms 70.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_29814 0.3356 ms 66.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29816 0.3469 ms 64.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29817 0.3545 ms 62.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29815 0.3652 ms 61.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29811 0.4131 ms 54.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5377 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8587520122528076, "best_triton_pos": 1, "best_triton_time": 0.9699199795722961, "best_triton_kernel": "triton_mm_29834", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.8588 ms 100.0% 
  triton_mm_29834 0.9699 ms 88.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29835 1.2459 ms 68.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29828 1.2739 ms 67.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29833 1.2769 ms 67.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_29829 1.3694 ms 62.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29830 1.4161 ms 60.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29831 1.4746 ms 58.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29832 1.5018 ms 57.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29826 1.8183 ms 47.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6573 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.12092799693346024, "best_triton_pos": 1, "best_triton_time": 0.1382399946451187, "best_triton_kernel": "triton_mm_29737", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(8192x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.1209 ms 100.0% 
  triton_mm_29737 0.1382 ms 87.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29744 0.1462 ms 82.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29743 0.1523 ms 79.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29738 0.1614 ms 74.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29740 0.1657 ms 73.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29741 0.1720 ms 70.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29739 0.1876 ms 64.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29735 0.1953 ms 61.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29742 0.2079 ms 58.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.4414 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_20539", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.008576000109314919, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20539 0.0086 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_20538 0.0092 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_20543 0.0094 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_20537 0.0097 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_20542 0.0103 ms 83.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0107 ms 80.2% 
  triton_mm_20548 0.0108 ms 79.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_20550 0.0108 ms 79.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_20536 0.0110 ms 78.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_20545 0.0123 ms 69.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1833 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_20554", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8", "best_time": 0.010048000141978264, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20554 0.0100 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  mm 0.0106 ms 94.9% 
  triton_mm_20553 0.0109 ms 92.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_20557 0.0117 ms 85.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_20552 0.0121 ms 83.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_20560 0.0124 ms 80.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20562 0.0129 ms 77.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20559 0.0131 ms 76.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20565 0.0156 ms 64.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20561 0.0159 ms 63.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1751 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_20575", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.013024000450968742, "best_triton_pos": 0}
AUTOTUNE mm(1024x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20575 0.0130 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0131 ms 99.8% 
  triton_mm_20572 0.0134 ms 97.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_20574 0.0135 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20577 0.0136 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20580 0.0159 ms 81.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20573 0.0162 ms 80.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20576 0.0166 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20579 0.0178 ms 73.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20567 0.0198 ms 65.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1430 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_20588", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.024191999807953835, "best_triton_pos": 0}
AUTOTUNE mm(4096x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_20588 0.0242 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20594 0.0249 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20591 0.0251 ms 96.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0273 ms 88.7% 
  triton_mm_20592 0.0299 ms 80.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20586 0.0305 ms 79.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_20589 0.0306 ms 79.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20595 0.0318 ms 76.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20593 0.0322 ms 75.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20590 0.0331 ms 73.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1806 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.07126399874687195, "best_triton_pos": 1, "best_triton_time": 0.07660800218582153, "best_triton_kernel": "triton_mm_20609", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0713 ms 100.0% 
  triton_mm_20609 0.0766 ms 93.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20603 0.0870 ms 81.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20610 0.0894 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20606 0.0907 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20604 0.0929 ms 76.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20607 0.0953 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20608 0.0953 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20605 0.1080 ms 66.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20601 0.1100 ms 64.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3344 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.2481600046157837, "best_triton_pos": 1, "best_triton_time": 0.29417601227760315, "best_triton_kernel": "triton_mm_20624", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2482 ms 100.0% 
  triton_mm_20624 0.2942 ms 84.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20618 0.3371 ms 73.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20625 0.3404 ms 72.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20621 0.3601 ms 68.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20619 0.3669 ms 67.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20623 0.3712 ms 66.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_20622 0.3821 ms 64.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20620 0.4170 ms 59.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20616 0.4347 ms 57.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5380 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.04179200157523155, "best_triton_pos": 1, "best_triton_time": 0.045152001082897186, "best_triton_kernel": "triton_mm_20527", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(8192x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0418 ms 100.0% 
  triton_mm_20527 0.0452 ms 92.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20530 0.0479 ms 87.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20528 0.0484 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20534 0.0485 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20533 0.0491 ms 85.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20531 0.0495 ms 84.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_20525 0.0576 ms 72.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_20529 0.0595 ms 70.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_20532 0.0617 ms 67.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2362 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_20244", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.07337599992752075, "best_triton_pos": 0}
AUTOTUNE bmm(384x256x64, 384x64x256)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20244 0.0734 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_20243 0.0737 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bmm 0.0764 ms 96.0% 
  triton_bmm_20249 0.0797 ms 92.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20247 0.0817 ms 89.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_20237 0.0884 ms 83.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20239 0.0895 ms 82.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_20238 0.0901 ms 81.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20248 0.0903 ms 81.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20240 0.0905 ms 81.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3724 seconds and 0.0003 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_20252", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.004736000206321478, "best_triton_pos": 0}
AUTOTUNE bmm(24x2x64, 24x64x2)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20252 0.0047 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_20258 0.0047 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_20257 0.0048 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_20259 0.0050 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_20253 0.0050 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_20251 0.0051 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_20256 0.0051 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_20255 0.0055 ms 85.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_20250 0.0058 ms 81.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  triton_bmm_20254 0.0062 ms 76.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
SingleProcess AUTOTUNE benchmarking takes 0.1115 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_20262", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.0058559998869895935, "best_triton_pos": 0}
AUTOTUNE bmm(192x16x64, 192x64x16)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20262 0.0059 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_20267 0.0059 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_20268 0.0059 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_20261 0.0061 ms 96.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_20263 0.0061 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_20266 0.0062 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_20269 0.0063 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_20265 0.0064 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_20260 0.0068 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  bmm 0.0071 ms 82.1% 
SingleProcess AUTOTUNE benchmarking takes 0.0862 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_20271", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4", "best_time": 0.009119999594986439, "best_triton_pos": 0}
AUTOTUNE bmm(384x32x64, 384x64x32)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20271 0.0091 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20277 0.0091 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20279 0.0092 ms 99.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_20275 0.0092 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20273 0.0092 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_20276 0.0092 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20278 0.0095 ms 96.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_20272 0.0095 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_20274 0.0101 ms 89.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20270 0.0103 ms 88.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=2
SingleProcess AUTOTUNE benchmarking takes 0.1106 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_bmm_20285", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4", "best_time": 0.023296000435948372, "best_triton_pos": 0}
AUTOTUNE bmm(768x64x64, 768x64x64)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20285 0.0233 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  bmm 0.0241 ms 96.8% 
  triton_bmm_20287 0.0241 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_20294 0.0241 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_20290 0.0247 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_20293 0.0248 ms 93.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_20284 0.0251 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_20289 0.0251 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20286 0.0253 ms 92.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20280 0.0255 ms 91.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=2
SingleProcess AUTOTUNE benchmarking takes 0.1705 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_20312", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.09481599926948547, "best_triton_pos": 0}
AUTOTUNE bmm(1536x128x64, 1536x64x128)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20312 0.0948 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20306 0.0950 ms 99.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20307 0.0952 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_20310 0.0980 ms 96.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  bmm 0.0999 ms 94.9% 
  triton_bmm_20302 0.1000 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_20300 0.1006 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20311 0.1031 ms 92.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20308 0.1042 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20309 0.1043 ms 90.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3562 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_20325", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.5753600001335144, "best_triton_pos": 0}
AUTOTUNE bmm(3072x256x64, 3072x64x256)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_20325 0.5754 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  bmm 0.5779 ms 99.6% 
  triton_bmm_20324 0.5791 ms 99.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20330 0.6062 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20328 0.6110 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_20321 0.6486 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_20318 0.6538 ms 88.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20319 0.6560 ms 87.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20320 0.6614 ms 87.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_20327 0.6691 ms 86.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.6542 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 15, "num_triton_choices": 14, "best_kernel": "bmm", "best_time": 0.08448000252246857, "best_triton_pos": 1, "best_triton_time": 0.0872960016131401, "best_triton_kernel": "triton_bmm_20439", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE bmm(384x256x256, 384x256x64)
strides: [s22**2, s22, 1], [64*s22, 64, 1]
dtypes: torch.float32, torch.float32
  bmm 0.0845 ms 100.0% 
  triton_bmm_20439 0.0873 ms 96.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_20449 0.0911 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_20447 0.0943 ms 89.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20448 0.0959 ms 88.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_20438 0.1022 ms 82.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20442 0.1032 ms 81.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_20444 0.1061 ms 79.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20450 0.1119 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_20445 0.1128 ms 74.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3051 seconds and 0.0003 seconds precompiling for 15 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_29839", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.0072639998979866505, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29839 0.0073 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29845 0.0073 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_29846 0.0079 ms 91.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29838 0.0084 ms 86.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29842 0.0089 ms 81.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_29844 0.0096 ms 75.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_29837 0.0100 ms 72.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29843 0.0119 ms 61.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0128 ms 56.9% 
  bias_addmm 0.0136 ms 53.3% 
SingleProcess AUTOTUNE benchmarking takes 0.1423 seconds and 0.0003 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_29850", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.00687999976798892, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29850 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29856 0.0069 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_29857 0.0069 ms 99.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29849 0.0076 ms 90.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29853 0.0079 ms 86.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_29855 0.0084 ms 81.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_29848 0.0094 ms 72.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_29854 0.0107 ms 64.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0127 ms 54.2% 
  bias_addmm 0.0136 ms 50.6% 
SingleProcess AUTOTUNE benchmarking takes 0.1393 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_29868", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006912000011652708, "best_triton_pos": 0}
AUTOTUNE addmm(16x2, 16x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29868 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29861 0.0071 ms 97.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29867 0.0071 ms 97.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_29860 0.0079 ms 87.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_29864 0.0082 ms 84.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_29866 0.0090 ms 77.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_29859 0.0099 ms 70.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_29865 0.0111 ms 62.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0126 ms 54.7% 
  bias_addmm 0.0136 ms 50.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1112 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_29878", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2", "best_time": 0.007199999876320362, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29878 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_29872 0.0072 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29879 0.0079 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29871 0.0084 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29875 0.0089 ms 80.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_29877 0.0095 ms 76.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_29870 0.0100 ms 72.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29876 0.0119 ms 60.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0128 ms 56.1% 
  bias_addmm 0.0137 ms 52.4% 
SingleProcess AUTOTUNE benchmarking takes 0.1141 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 14, "num_triton_choices": 12, "best_kernel": "triton_mm_29891", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4", "best_time": 0.007135999854654074, "best_triton_pos": 0}
AUTOTUNE addmm(64x2, 64x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29891 0.0071 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29890 0.0075 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29884 0.0076 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29883 0.0085 ms 83.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29882 0.0085 ms 83.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29887 0.0088 ms 80.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29889 0.0097 ms 73.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29881 0.0102 ms 69.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29888 0.0122 ms 58.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  addmm 0.0131 ms 54.5% 
SingleProcess AUTOTUNE benchmarking takes 0.1456 seconds and 0.0001 seconds precompiling for 14 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_29902", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.0074880002066493034, "best_triton_pos": 0}
AUTOTUNE addmm(128x2, 128x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29902 0.0075 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29896 0.0075 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29895 0.0087 ms 86.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29894 0.0088 ms 85.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29899 0.0091 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29907 0.0096 ms 78.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29901 0.0099 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29906 0.0106 ms 70.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29893 0.0108 ms 69.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29904 0.0109 ms 68.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1738 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_29918", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.0077760000713169575, "best_triton_pos": 0}
AUTOTUNE addmm(256x2, 256x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29918 0.0078 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29912 0.0079 ms 98.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29910 0.0088 ms 88.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29911 0.0090 ms 86.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29915 0.0093 ms 83.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29923 0.0096 ms 80.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_29917 0.0101 ms 76.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29920 0.0110 ms 70.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29909 0.0110 ms 70.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29922 0.0111 ms 70.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1557 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_29934", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 1.2332799434661865, "best_triton_pos": 0}
AUTOTUNE addmm(8192x20005, 8192x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29934 1.2333 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29931 1.2744 ms 96.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29937 1.3218 ms 93.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29935 1.3289 ms 92.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29938 1.3571 ms 90.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29932 1.3745 ms 89.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29929 1.4961 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29930 1.6571 ms 74.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_29933 1.6669 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 2.0166 ms 61.2% 
SingleProcess AUTOTUNE benchmarking takes 0.7666 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_29943", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.043296001851558685, "best_triton_pos": 0}
AUTOTUNE addmm(4x20005, 4x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29943 0.0433 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29940 0.0434 ms 99.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_29946 0.0436 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29950 0.0441 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29942 0.0444 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_29947 0.0444 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29941 0.0453 ms 95.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_29951 0.0454 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29952 0.0458 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_29954 0.0458 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2697 seconds and 0.0002 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_29965", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.06102399900555611, "best_triton_pos": 0}
AUTOTUNE addmm(256x20005, 256x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29965 0.0610 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29962 0.0626 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29966 0.0647 ms 94.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29963 0.0668 ms 91.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29960 0.0713 ms 85.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29961 0.0720 ms 84.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_29968 0.0724 ms 84.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29969 0.0732 ms 83.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29964 0.0743 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29967 0.0982 ms 62.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2859 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_29980", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.16156800091266632, "best_triton_pos": 0}
AUTOTUNE addmm(1024x20005, 1024x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29980 0.1616 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29981 0.1660 ms 97.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29977 0.1739 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29983 0.1739 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29978 0.1808 ms 89.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29984 0.1891 ms 85.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29975 0.2036 ms 79.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29979 0.2152 ms 75.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29976 0.2161 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 0.2632 ms 61.4% 
SingleProcess AUTOTUNE benchmarking takes 0.5122 seconds and 0.0002 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_29995", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.623199999332428, "best_triton_pos": 0}
AUTOTUNE addmm(4096x20005, 4096x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_29995 0.6232 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29992 0.6398 ms 97.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29996 0.6484 ms 96.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29998 0.6770 ms 92.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29993 0.7187 ms 86.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_29999 0.7238 ms 86.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_29990 0.7533 ms 82.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_29991 0.8198 ms 76.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_29994 0.8433 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bias_addmm 1.0478 ms 59.5% 
SingleProcess AUTOTUNE benchmarking takes 0.6195 seconds and 0.0002 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_30010", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 2.476032018661499, "best_triton_pos": 0}
AUTOTUNE addmm(16384x20005, 16384x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_30010 2.4760 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30013 2.6203 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30007 2.6374 ms 93.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30008 2.7428 ms 90.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30011 2.8345 ms 87.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30014 2.8348 ms 87.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30005 3.0146 ms 82.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_30009 3.3496 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30006 3.6908 ms 67.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 4.0836 ms 60.6% 
SingleProcess AUTOTUNE benchmarking takes 0.9353 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_30025", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 9.872480392456055, "best_triton_pos": 0}
AUTOTUNE addmm(65536x20005, 65536x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_30025 9.8725 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30022 10.2359 ms 96.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30028 10.4418 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30029 11.0912 ms 89.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30026 11.2616 ms 87.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30023 11.3588 ms 86.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30020 11.9490 ms 82.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_30024 13.3336 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30021 14.3840 ms 68.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 15.8170 ms 62.4% 
SingleProcess AUTOTUNE benchmarking takes 2.3522 seconds and 0.0001 seconds precompiling for 17 choices
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 256, 768), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 768), (768, 768), (256, 768)) for shape ((2, 256, 768), (768, 768), (512, 768))
runtime shape key ((2, 256, 12, 64), (768, 768), (512, 768))
picked kernel 1  :  ((16, 16, 12, 64), (768, 768), (256, 768)) for shape ((2, 256, 12, 64), (768, 768), (512, 768))
runtime shape key ((2, 256, 3072), (768, 3072), (512, 768))
picked kernel 1  :  ((16, 16, 3072), (768, 3072), (256, 768)) for shape ((2, 256, 3072), (768, 3072), (512, 768))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
eager: 0.0073s, compiled: 0.0038s
HINT_SIZE (2, 2048) RUNTIME_SIZE (2, 256) 1.898x
model run with shapes ['', '', torch.Size([32, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
0 40.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 19.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 12.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 11.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 10.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 9.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
0 15.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 6.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 3.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 4.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 5.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 6.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
0 22.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 10.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 6.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 4.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 4.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 6.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
model run with shapes ['', '', torch.Size([32, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
model run with shapes ['', '', torch.Size([32, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
model run with shapes ['', '', torch.Size([32, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
model run with shapes ['', '', torch.Size([32, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 256, 64), (32, 12, 64, 256), (384, 256, 256))
runtime shape key ((2,), (32, 256, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 256, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
picked kernel 3  :  ((20005,), (64, 64, 768), (20005, 768), (4096, 20005)) for shape ((20005,), (32, 256, 768), (20005, 768), (8192, 20005))
running speedup_experiment with sizes: [torch.Size([2, 256]), torch.Size([2, 256])]
running benchmark:   0%|          | 0/30 [00:00<?, ?it/s]runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
0 28.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 25.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 24.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 23.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 22.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 21.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
0 7.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 10.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 11.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 12.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 13.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 14.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
0 14.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 8.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 8.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 12.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 14.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  20%|██        | 6/30 [00:00<00:00, 56.02it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  50%|█████     | 15/30 [00:00<00:00, 74.23it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  80%|████████  | 24/30 [00:00<00:00, 80.69it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  80%|████████  | 24/30 [00:17<00:00, 80.69it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark: 100%|██████████| 30/30 [04:00<00:00, 12.83s/it]running benchmark: 100%|██████████| 30/30 [04:00<00:00,  8.03s/it]
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_30655", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.011327999643981457, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_30655 0.0113 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_30659 0.0115 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_30654 0.0122 ms 92.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_30653 0.0124 ms 91.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_30666 0.0127 ms 89.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_30658 0.0128 ms 88.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30652 0.0133 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_30664 0.0135 ms 83.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_30661 0.0147 ms 77.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  mm 0.0149 ms 75.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1887 seconds and 0.0004 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.014816000126302242, "best_triton_pos": 1, "best_triton_time": 0.014911999925971031, "best_triton_kernel": "triton_mm_30676", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(256x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0148 ms 100.0% 
  triton_mm_30676 0.0149 ms 99.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30673 0.0152 ms 97.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_30678 0.0154 ms 96.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30675 0.0157 ms 94.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30681 0.0177 ms 83.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30677 0.0180 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30674 0.0181 ms 81.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30680 0.0196 ms 75.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30668 0.0197 ms 75.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1897 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_30689", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.022592000663280487, "best_triton_pos": 0}
AUTOTUNE mm(1024x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_30689 0.0226 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30692 0.0236 ms 95.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30695 0.0237 ms 95.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0258 ms 87.5% 
  triton_mm_30693 0.0284 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30687 0.0294 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_30696 0.0309 ms 73.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30690 0.0313 ms 72.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30691 0.0314 ms 72.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30694 0.0316 ms 71.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1803 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.057920001447200775, "best_triton_pos": 1, "best_triton_time": 0.06969600170850754, "best_triton_kernel": "triton_mm_30710", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(4096x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0579 ms 100.0% 
  triton_mm_30710 0.0697 ms 83.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30704 0.0824 ms 70.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30711 0.0848 ms 68.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30707 0.0865 ms 67.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30708 0.0884 ms 65.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30709 0.0888 ms 65.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30705 0.0907 ms 63.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30706 0.0988 ms 58.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30702 0.1064 ms 54.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3291 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.21478399634361267, "best_triton_pos": 1, "best_triton_time": 0.27926400303840637, "best_triton_kernel": "triton_mm_30725", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2148 ms 100.0% 
  triton_mm_30725 0.2793 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30719 0.3442 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30726 0.3505 ms 61.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30724 0.3524 ms 60.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30720 0.3630 ms 59.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30722 0.3721 ms 57.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30723 0.3743 ms 57.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30721 0.3994 ms 53.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30717 0.4427 ms 48.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5429 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8569279909133911, "best_triton_pos": 1, "best_triton_time": 1.1144959926605225, "best_triton_kernel": "triton_mm_30740", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.8569 ms 100.0% 
  triton_mm_30740 1.1145 ms 76.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30739 1.3998 ms 61.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30741 1.4136 ms 60.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30735 1.4253 ms 60.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30734 1.4294 ms 59.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30737 1.4995 ms 57.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30738 1.5140 ms 56.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30736 1.5327 ms 55.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30732 1.9104 ms 44.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6793 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8590720295906067, "best_triton_pos": 1, "best_triton_time": 1.1036159992218018, "best_triton_kernel": "triton_mm_30649", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x3072)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.8591 ms 100.0% 
  triton_mm_30649 1.1036 ms 77.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30650 1.3466 ms 63.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30648 1.3786 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30644 1.4797 ms 58.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30643 1.4831 ms 57.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30646 1.4995 ms 57.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30647 1.5029 ms 57.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30645 1.5753 ms 54.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30640 1.9699 ms 43.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6752 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "mm", "best_time": 0.01484800036996603, "best_triton_pos": 1, "best_triton_time": 0.015231999568641186, "best_triton_kernel": "triton_mm_39759", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2"}
AUTOTUNE mm(4x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0148 ms 100.0% 
  triton_mm_39759 0.0152 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39763 0.0199 ms 74.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39758 0.0241 ms 61.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39757 0.0256 ms 58.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39762 0.0275 ms 54.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39756 0.0286 ms 51.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39770 0.0293 ms 50.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39768 0.0307 ms 48.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39765 0.0352 ms 42.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2402 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.020255999639630318, "best_triton_pos": 1, "best_triton_time": 0.025887999683618546, "best_triton_kernel": "triton_mm_39774", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE mm(256x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0203 ms 100.0% 
  triton_mm_39774 0.0259 ms 78.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39773 0.0292 ms 69.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39777 0.0303 ms 66.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_39780 0.0311 ms 65.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39772 0.0340 ms 59.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_39782 0.0347 ms 58.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39779 0.0356 ms 56.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39785 0.0403 ms 50.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39781 0.0479 ms 42.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2352 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.03203200176358223, "best_triton_pos": 1, "best_triton_time": 0.036448001861572266, "best_triton_kernel": "triton_mm_39792", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8"}
AUTOTUNE mm(1024x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.0320 ms 100.0% 
  triton_mm_39792 0.0364 ms 87.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_39795 0.0372 ms 86.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39797 0.0398 ms 80.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39794 0.0410 ms 78.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39800 0.0431 ms 74.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39789 0.0449 ms 71.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39796 0.0513 ms 62.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39793 0.0517 ms 61.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39799 0.0540 ms 59.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2078 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_39808", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.07203199714422226, "best_triton_pos": 0}
AUTOTUNE mm(4096x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  triton_mm_39808 0.0720 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39814 0.0750 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39811 0.0775 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0818 ms 88.1% 
  triton_mm_39809 0.0924 ms 77.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39815 0.0961 ms 75.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39812 0.0963 ms 74.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39810 0.0978 ms 73.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39806 0.0993 ms 72.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_39813 0.1027 ms 70.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3235 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.22441600263118744, "best_triton_pos": 1, "best_triton_time": 0.24156799912452698, "best_triton_kernel": "triton_mm_39829", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.2244 ms 100.0% 
  triton_mm_39829 0.2416 ms 92.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39823 0.2731 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39830 0.3027 ms 74.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39828 0.3180 ms 70.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_39824 0.3318 ms 67.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39826 0.3447 ms 65.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39827 0.3531 ms 63.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39825 0.3658 ms 61.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39821 0.4067 ms 55.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5371 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8541120290756226, "best_triton_pos": 1, "best_triton_time": 0.9712640047073364, "best_triton_kernel": "triton_mm_39844", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.8541 ms 100.0% 
  triton_mm_39844 0.9713 ms 87.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39838 1.2229 ms 69.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39845 1.2789 ms 66.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39843 1.2919 ms 66.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_39839 1.3027 ms 65.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39840 1.4363 ms 59.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39841 1.5167 ms 56.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39842 1.5212 ms 56.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39836 1.7705 ms 48.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6616 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.8518400192260742, "best_triton_pos": 1, "best_triton_time": 0.9567999839782715, "best_triton_kernel": "triton_mm_39753", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x3072, 3072x768)
strides: [3072, 1], [1, 3072]
dtypes: torch.float32, torch.float32
  mm 0.8518 ms 100.0% 
  triton_mm_39753 0.9568 ms 89.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39754 1.2017 ms 70.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39752 1.2783 ms 66.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_39747 1.2966 ms 65.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39748 1.3620 ms 62.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39749 1.4348 ms 59.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39751 1.4853 ms 57.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39750 1.4932 ms 57.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39745 1.8931 ms 45.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.6623 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 16, "best_kernel": "triton_mm_30549", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.008736000396311283, "best_triton_pos": 0}
AUTOTUNE mm(4x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_30549 0.0087 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_30548 0.0091 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_30553 0.0092 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_30547 0.0096 ms 90.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_30552 0.0104 ms 84.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0104 ms 84.0% 
  triton_mm_30560 0.0108 ms 81.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_30546 0.0109 ms 79.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_30558 0.0109 ms 79.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_30555 0.0121 ms 72.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1860 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_30564", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8", "best_time": 0.009920000098645687, "best_triton_pos": 0}
AUTOTUNE mm(256x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_30564 0.0099 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  mm 0.0101 ms 97.8% 
  triton_mm_30563 0.0107 ms 92.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_30567 0.0114 ms 87.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_30562 0.0119 ms 83.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_30570 0.0121 ms 82.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30569 0.0126 ms 78.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30572 0.0128 ms 77.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30575 0.0156 ms 63.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30571 0.0156 ms 63.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1747 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.012799999676644802, "best_triton_pos": 1, "best_triton_time": 0.012992000207304955, "best_triton_kernel": "triton_mm_30585", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(1024x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0128 ms 100.0% 
  triton_mm_30585 0.0130 ms 98.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30587 0.0135 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30584 0.0137 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30582 0.0137 ms 93.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_30590 0.0161 ms 79.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30583 0.0163 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30586 0.0165 ms 77.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30589 0.0180 ms 71.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30577 0.0197 ms 64.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1435 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_mm_30598", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.024191999807953835, "best_triton_pos": 0}
AUTOTUNE mm(4096x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  triton_mm_30598 0.0242 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30604 0.0249 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30601 0.0249 ms 97.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  mm 0.0266 ms 90.9% 
  triton_mm_30599 0.0294 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30596 0.0300 ms 80.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_30602 0.0307 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30605 0.0327 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30603 0.0327 ms 74.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30600 0.0329 ms 73.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1807 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.0716480016708374, "best_triton_pos": 1, "best_triton_time": 0.07638400048017502, "best_triton_kernel": "triton_mm_30619", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(16384x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.0716 ms 100.0% 
  triton_mm_30619 0.0764 ms 93.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30613 0.0864 ms 82.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30620 0.0894 ms 80.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30616 0.0909 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30614 0.0931 ms 77.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30618 0.0944 ms 75.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30617 0.0961 ms 74.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30615 0.1076 ms 66.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30611 0.1096 ms 65.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.3343 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.24582399427890778, "best_triton_pos": 1, "best_triton_time": 0.29280000925064087, "best_triton_kernel": "triton_mm_30634", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2458 ms 100.0% 
  triton_mm_30634 0.2928 ms 84.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30635 0.3302 ms 74.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30628 0.3388 ms 72.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30629 0.3599 ms 68.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30631 0.3643 ms 67.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30633 0.3746 ms 65.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30632 0.3763 ms 65.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30630 0.4255 ms 57.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30626 0.4333 ms 56.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5373 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "mm", "best_time": 0.2455040067434311, "best_triton_pos": 1, "best_triton_time": 0.29449599981307983, "best_triton_kernel": "triton_mm_30543", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4"}
AUTOTUNE mm(65536x768, 768x768)
strides: [768, 1], [1, 768]
dtypes: torch.float32, torch.float32
  mm 0.2455 ms 100.0% 
  triton_mm_30543 0.2945 ms 83.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30544 0.3375 ms 72.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30537 0.3397 ms 72.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30540 0.3550 ms 69.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30538 0.3607 ms 68.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30542 0.3711 ms 66.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_mm_30541 0.3743 ms 65.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_30539 0.4225 ms 58.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_30535 0.4304 ms 57.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.5416 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_30254", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 3.229343891143799, "best_triton_pos": 0}
AUTOTUNE bmm(384x2048x64, 384x64x2048)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30254 3.2293 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_30253 3.2310 ms 99.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bmm 3.3626 ms 96.0% 
  triton_bmm_30248 3.6787 ms 87.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30255 3.6907 ms 87.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30257 3.8036 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_30259 3.8074 ms 84.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30258 3.9570 ms 81.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30256 4.0650 ms 79.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_30247 4.0885 ms 79.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 1.1405 seconds and 0.0003 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_30267", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1", "best_time": 0.00470399996265769, "best_triton_pos": 0}
AUTOTUNE bmm(24x2x64, 24x64x2)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30267 0.0047 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_30268 0.0047 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_30262 0.0048 ms 98.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_30266 0.0050 ms 94.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_30261 0.0050 ms 93.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_30269 0.0050 ms 93.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_30263 0.0051 ms 93.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_30265 0.0056 ms 84.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_30260 0.0057 ms 83.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  triton_bmm_30264 0.0062 ms 75.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
SingleProcess AUTOTUNE benchmarking takes 0.1084 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_30278", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1", "best_time": 0.005824000108987093, "best_triton_pos": 0}
AUTOTUNE bmm(192x16x64, 192x64x16)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30278 0.0058 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_30272 0.0059 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_30277 0.0059 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_30271 0.0061 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_30279 0.0061 ms 95.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_bmm_30273 0.0061 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_bmm_30276 0.0061 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_bmm_30275 0.0063 ms 91.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_bmm_30270 0.0068 ms 85.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=1
  triton_bmm_30274 0.0071 ms 81.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
SingleProcess AUTOTUNE benchmarking takes 0.0869 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 11, "num_triton_choices": 10, "best_kernel": "triton_bmm_30289", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.009088000282645226, "best_triton_pos": 0}
AUTOTUNE bmm(384x32x64, 384x64x32)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30289 0.0091 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_30281 0.0091 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30283 0.0092 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_30288 0.0092 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_30286 0.0092 ms 99.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30287 0.0092 ms 99.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30285 0.0092 ms 98.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30282 0.0093 ms 97.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_30284 0.0099 ms 91.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30280 0.0101 ms 90.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=1, num_warps=2
SingleProcess AUTOTUNE benchmarking takes 0.1106 seconds and 0.0001 seconds precompiling for 11 choices
Autotune Choices Stats:
{"num_choices": 16, "num_triton_choices": 15, "best_kernel": "triton_bmm_30295", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4", "best_time": 0.023104000836610794, "best_triton_pos": 0}
AUTOTUNE bmm(768x64x64, 768x64x64)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30295 0.0231 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30304 0.0242 ms 95.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  bmm 0.0242 ms 95.4% 
  triton_bmm_30297 0.0244 ms 94.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_30303 0.0248 ms 93.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_30294 0.0253 ms 91.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_30300 0.0254 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_30296 0.0255 ms 90.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30298 0.0255 ms 90.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_30301 0.0256 ms 90.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.1744 seconds and 0.0001 seconds precompiling for 16 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_30322", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.0947519987821579, "best_triton_pos": 0}
AUTOTUNE bmm(1536x128x64, 1536x64x128)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30322 0.0948 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30317 0.0950 ms 99.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_30316 0.0952 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30320 0.0982 ms 96.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_30312 0.1008 ms 94.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_30310 0.1011 ms 93.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  bmm 0.1028 ms 92.2% 
  triton_bmm_30321 0.1033 ms 91.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30318 0.1040 ms 91.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30319 0.1046 ms 90.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.3724 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 19, "num_triton_choices": 18, "best_kernel": "triton_bmm_30335", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.5744320154190063, "best_triton_pos": 0}
AUTOTUNE bmm(3072x256x64, 3072x64x256)
strides: [64*s22, 64, 1], [64*s22, s22, 1]
dtypes: torch.float32, torch.float32
  triton_bmm_30335 0.5744 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_bmm_30334 0.5782 ms 99.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  bmm 0.5885 ms 97.6% 
  triton_bmm_30340 0.6061 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30338 0.6102 ms 94.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_30328 0.6452 ms 89.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30331 0.6475 ms 88.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_bmm_30329 0.6560 ms 87.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30330 0.6570 ms 87.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_bmm_30339 0.6766 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 1.5966 seconds and 0.0001 seconds precompiling for 19 choices
Autotune Choices Stats:
{"num_choices": 15, "num_triton_choices": 14, "best_kernel": "bmm", "best_time": 3.4060800075531006, "best_triton_pos": 1, "best_triton_time": 3.604095935821533, "best_triton_kernel": "triton_bmm_30449", "best_triton_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8"}
AUTOTUNE bmm(384x2048x2048, 384x2048x64)
strides: [s22**2, s22, 1], [64*s22, 64, 1]
dtypes: torch.float32, torch.float32
  bmm 3.4061 ms 100.0% 
  triton_bmm_30449 3.6041 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_bmm_30459 3.7444 ms 91.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
  triton_bmm_30457 3.7748 ms 90.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30458 3.7914 ms 89.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_bmm_30460 3.8468 ms 88.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30448 4.0647 ms 83.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=32, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30452 4.4711 ms 76.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_bmm_30454 4.6583 ms 73.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_bmm_30456 4.7331 ms 72.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=False, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.8501 seconds and 0.0003 seconds precompiling for 15 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_39849", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.007199999876320362, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39849 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39855 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_39856 0.0078 ms 92.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39848 0.0084 ms 86.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39852 0.0091 ms 79.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_39854 0.0094 ms 76.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_39847 0.0101 ms 71.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39853 0.0117 ms 61.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0126 ms 57.3% 
  bias_addmm 0.0137 ms 52.7% 
SingleProcess AUTOTUNE benchmarking takes 0.1395 seconds and 0.0003 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_39867", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006816000211983919, "best_triton_pos": 0}
AUTOTUNE addmm(2x2, 2x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39867 0.0068 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39860 0.0069 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39866 0.0070 ms 97.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_39859 0.0078 ms 87.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39863 0.0079 ms 86.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_39865 0.0085 ms 80.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_39858 0.0094 ms 72.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_39864 0.0106 ms 64.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  bias_addmm 0.0135 ms 50.6% 
  addmm 0.0138 ms 49.3% 
SingleProcess AUTOTUNE benchmarking takes 0.1362 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_39878", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1", "best_time": 0.006943999789655209, "best_triton_pos": 0}
AUTOTUNE addmm(16x2, 16x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39878 0.0069 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39877 0.0070 ms 99.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_39871 0.0070 ms 98.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39870 0.0080 ms 87.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=1
  triton_mm_39874 0.0082 ms 85.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  triton_mm_39876 0.0088 ms 78.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=1
  triton_mm_39869 0.0099 ms 70.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=1
  triton_mm_39875 0.0111 ms 62.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=1
  addmm 0.0128 ms 54.1% 
  bias_addmm 0.0137 ms 50.7% 
SingleProcess AUTOTUNE benchmarking takes 0.1112 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 13, "num_triton_choices": 11, "best_kernel": "triton_mm_39882", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.007199999876320362, "best_triton_pos": 0}
AUTOTUNE addmm(32x2, 32x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39882 0.0072 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39888 0.0072 ms 99.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_39889 0.0078 ms 92.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39881 0.0085 ms 84.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39885 0.0091 ms 79.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  triton_mm_39887 0.0095 ms 75.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=2
  triton_mm_39880 0.0102 ms 70.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39886 0.0119 ms 60.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=2
  addmm 0.0126 ms 57.0% 
  bias_addmm 0.0136 ms 52.8% 
SingleProcess AUTOTUNE benchmarking takes 0.1139 seconds and 0.0001 seconds precompiling for 13 choices
Autotune Choices Stats:
{"num_choices": 14, "num_triton_choices": 12, "best_kernel": "triton_mm_39901", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4", "best_time": 0.0072639998979866505, "best_triton_pos": 0}
AUTOTUNE addmm(64x2, 64x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39901 0.0073 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39894 0.0075 ms 97.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39900 0.0075 ms 97.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39893 0.0085 ms 85.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39892 0.0086 ms 84.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39897 0.0090 ms 80.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39899 0.0096 ms 75.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39891 0.0104 ms 70.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39898 0.0121 ms 60.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  addmm 0.0127 ms 57.2% 
SingleProcess AUTOTUNE benchmarking takes 0.1422 seconds and 0.0001 seconds precompiling for 14 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_39912", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.007615999784320593, "best_triton_pos": 0}
AUTOTUNE addmm(128x2, 128x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39912 0.0076 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39906 0.0077 ms 99.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39905 0.0087 ms 87.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39904 0.0087 ms 87.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39909 0.0092 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39917 0.0097 ms 78.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39911 0.0099 ms 77.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39903 0.0107 ms 71.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39916 0.0107 ms 71.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39914 0.0110 ms 69.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1660 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_39928", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4", "best_time": 0.0077760000713169575, "best_triton_pos": 0}
AUTOTUNE addmm(256x2, 256x768, 768x2)
strides: [0, 1], [768*s22, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39928 0.0078 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39922 0.0078 ms 99.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39921 0.0089 ms 87.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39920 0.0091 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39925 0.0094 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39933 0.0098 ms 79.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39927 0.0101 ms 76.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=4
  triton_mm_39919 0.0110 ms 70.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=32, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39932 0.0110 ms 70.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39930 0.0112 ms 69.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=16, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.1543 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_39941", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 10.038687705993652, "best_triton_pos": 0}
AUTOTUNE addmm(65536x20005, 65536x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39941 10.0387 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39944 10.2271 ms 98.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39947 10.3966 ms 96.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39948 10.8885 ms 92.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39942 10.9396 ms 91.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39939 12.0530 ms 83.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_39945 12.1118 ms 82.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39943 13.2161 ms 76.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39940 13.6036 ms 73.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 15.8273 ms 63.4% 
SingleProcess AUTOTUNE benchmarking takes 2.3901 seconds and 0.0003 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 18, "num_triton_choices": 16, "best_kernel": "triton_mm_39953", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2", "best_time": 0.04320000112056732, "best_triton_pos": 0}
AUTOTUNE addmm(4x20005, 4x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39953 0.0432 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39950 0.0433 ms 99.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=2
  triton_mm_39956 0.0436 ms 99.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39960 0.0442 ms 97.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39952 0.0443 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=32, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=2
  triton_mm_39957 0.0443 ms 97.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=128, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39951 0.0452 ms 95.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=4
  triton_mm_39961 0.0453 ms 95.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39964 0.0456 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=5, num_warps=8
  triton_mm_39958 0.0460 ms 94.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=16, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
SingleProcess AUTOTUNE benchmarking takes 0.2521 seconds and 0.0001 seconds precompiling for 18 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_39975", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.06143999844789505, "best_triton_pos": 0}
AUTOTUNE addmm(256x20005, 256x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39975 0.0614 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39972 0.0632 ms 97.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39976 0.0650 ms 94.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39973 0.0677 ms 90.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39978 0.0715 ms 85.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39970 0.0716 ms 85.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_39971 0.0724 ms 84.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  triton_mm_39979 0.0734 ms 83.7% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39974 0.0741 ms 82.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39977 0.0986 ms 62.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=8
SingleProcess AUTOTUNE benchmarking takes 0.2811 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_39990", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.16486400365829468, "best_triton_pos": 0}
AUTOTUNE addmm(1024x20005, 1024x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_39990 0.1649 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39991 0.1657 ms 99.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39987 0.1727 ms 95.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39993 0.1731 ms 95.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39988 0.1794 ms 91.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_39994 0.1892 ms 87.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39985 0.2039 ms 80.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_39989 0.2154 ms 76.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_39986 0.2161 ms 76.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 0.2636 ms 62.5% 
SingleProcess AUTOTUNE benchmarking takes 0.5091 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_40005", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 0.6230080127716064, "best_triton_pos": 0}
AUTOTUNE addmm(4096x20005, 4096x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_40005 0.6230 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40006 0.6493 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40002 0.6583 ms 94.6% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40008 0.6755 ms 92.2% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40003 0.7075 ms 88.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40009 0.7214 ms 86.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40000 0.7562 ms 82.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_40004 0.8430 ms 73.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40001 0.8730 ms 71.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 1.0515 ms 59.2% 
SingleProcess AUTOTUNE benchmarking takes 0.6116 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_40020", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 2.4736320972442627, "best_triton_pos": 0}
AUTOTUNE addmm(16384x20005, 16384x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_40020 2.4736 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40021 2.6082 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40017 2.6215 ms 94.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40023 2.6575 ms 93.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40018 2.8130 ms 87.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40024 2.9854 ms 82.9% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40015 2.9882 ms 82.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_40019 3.3393 ms 74.1% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40016 4.0286 ms 61.4% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 4.0729 ms 60.7% 
SingleProcess AUTOTUNE benchmarking takes 0.9292 seconds and 0.0001 seconds precompiling for 17 choices
Autotune Choices Stats:
{"num_choices": 17, "num_triton_choices": 15, "best_kernel": "triton_mm_40035", "best_kernel_desc": "ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4", "best_time": 9.916383743286133, "best_triton_pos": 0}
AUTOTUNE addmm(65536x20005, 65536x768, 768x20005)
strides: [0, 1], [768, 1], [1, 768]
dtypes: torch.float32, torch.float32, torch.float32
  triton_mm_40035 9.9164 ms 100.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40032 10.3281 ms 96.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40038 10.4574 ms 94.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40039 11.3560 ms 87.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=128, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40036 11.4262 ms 86.8% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40033 11.4903 ms 86.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=4, num_warps=8
  triton_mm_40030 12.2350 ms 81.0% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=2, num_warps=4
  triton_mm_40034 13.4903 ms 73.5% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=128, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=4
  triton_mm_40031 13.9138 ms 71.3% ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, EVEN_K=True, GROUP_M=8, USE_FAST_ACCUM=False, num_stages=3, num_warps=8
  bias_addmm 15.8295 ms 62.6% 
SingleProcess AUTOTUNE benchmarking takes 2.3563 seconds and 0.0001 seconds precompiling for 17 choices
['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
eager: 0.0074s, compiled: 0.0036s
HINT_SIZE (32, 256) RUNTIME_SIZE (2, 256) 2.066x
model run with shapes ['', '', torch.Size([32, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
0 52.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 31.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 24.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 23.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 22.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 21.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
0 18.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 9.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 6.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 7.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 8.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 9.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
0 28.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 16.0 ((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 12.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 8.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 6.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
model run with shapes ['', '', torch.Size([32, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
model run with shapes ['', '', torch.Size([32, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
model run with shapes ['', '', torch.Size([32, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
model run with shapes ['', '', torch.Size([32, 2048]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([32, 2048]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((32, 12, 2048, 64), (32, 12, 64, 2048), (384, 2048, 2048))
runtime shape key ((2,), (32, 2048, 768), (2, 768), (32, 2))
picked kernel 2  :  ((2,), (32, 32, 768), (2, 768), (32, 2)) for shape ((2,), (32, 2048, 768), (2, 768), (32, 2))
runtime shape key ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
picked kernel 5  :  ((20005,), (256, 256, 768), (20005, 768), (65536, 20005)) for shape ((20005,), (32, 2048, 768), (20005, 768), (65536, 20005))
running speedup_experiment with sizes: [torch.Size([2, 256]), torch.Size([2, 256])]
running benchmark:   0%|          | 0/30 [00:00<?, ?it/s]runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
0 28.0 ((2, 12, 2, 64), (2, 12, 64, 2), (24, 2, 2))
1 25.0 ((16, 12, 16, 64), (16, 12, 64, 16), (192, 16, 16))
2 24.0 ((32, 12, 32, 64), (32, 12, 64, 32), (384, 32, 32))
3 23.0 ((64, 12, 64, 64), (64, 12, 64, 64), (768, 64, 64))
4 22.0 ((128, 12, 128, 64), (128, 12, 64, 128), (1536, 128, 128))
5 21.0 ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
0 7.0 ((2,), (2, 2, 768), (2, 768), (2, 2))
1 10.0 ((2,), (16, 16, 768), (2, 768), (16, 2))
2 11.0 ((2,), (32, 32, 768), (2, 768), (32, 2))
3 12.0 ((2,), (64, 64, 768), (2, 768), (64, 2))
4 13.0 ((2,), (128, 128, 768), (2, 768), (128, 2))
5 14.0 ((2,), (256, 256, 768), (2, 768), (256, 2))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
0 14.0 ((20005,), (2, 2, 768), (20005, 768), (4, 20005))
1 8.0 running benchmark:   3%|▎         | 1/30 [00:00<00:25,  1.16it/s]((20005,), (16, 16, 768), (20005, 768), (256, 20005))
2 8.0 ((20005,), (32, 32, 768), (20005, 768), (1024, 20005))
3 10.0 ((20005,), (64, 64, 768), (20005, 768), (4096, 20005))
4 12.0 ((20005,), (128, 128, 768), (20005, 768), (16384, 20005))
5 14.0 ((20005,), (256, 256, 768), (20005, 768), (65536, 20005))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  37%|███▋      | 11/30 [00:00<00:01, 14.94it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark:  70%|███████   | 21/30 [00:01<00:00, 28.56it/s]['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes ['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
runtime input shapes [torch.Size([2, 256]), torch.Size([2, 256])]
model run with shapes running benchmark: 100%|██████████| 30/30 [00:01<00:00, 25.28it/s]
['', '', torch.Size([2, 256]), torch.Size([20005, 768]), torch.Size([1, 2048, 768]), torch.Size([3, 768]), '', '', torch.Size([2, 256]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768, 768]), torch.Size([768]), torch.Size([768]), torch.Size([768]), torch.Size([3072, 768]), torch.Size([3072]), torch.Size([768, 3072]), torch.Size([768]), torch.Size([2, 768]), torch.Size([2]), torch.Size([20005, 768]), torch.Size([20005])]
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
picked kernel 5  :  ((256, 12, 256, 64), (256, 12, 64, 256), (3072, 256, 256)) for shape ((2, 12, 256, 64), (2, 12, 64, 256), (24, 256, 256))
runtime shape key ((2,), (2, 256, 768), (2, 768), (2, 2))
picked kernel 0  :  ((2,), (2, 2, 768), (2, 768), (2, 2)) for shape ((2,), (2, 256, 768), (2, 768), (2, 2))
runtime shape key ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
picked kernel 1  :  ((20005,), (16, 16, 768), (20005, 768), (256, 20005)) for shape ((20005,), (2, 256, 768), (20005, 768), (512, 20005))
eager: 0.0071s, compiled: 0.0035s
HINT_SIZE (32, 2048) RUNTIME_SIZE (2, 256) 2.013x
2.199x 1.898x 2.066x 2.013x
